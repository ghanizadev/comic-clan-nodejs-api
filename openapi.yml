openapi: 3.0.0
info:
  version: "0.0.1-oas3"
  title: ComicClan
  description: An complete API made to serve new upcoming ComicClan social network
  contact:
    name: Jean Melo
    email: jf.melo6@gmail.com

security:
  - password:
      - read
      - write
paths:
  /oauth/token:
    post:
      tags:
        - Authentication
      summary: Issues a toke to given valid user and password
      description: >-
        In order to access resources like post, media and comments, users should
        issue a token to safely procees to content.
      security: 
        - basicAuth: []
      responses:
        '200':
          description: OK
          content:
            '*/*':
              schema:
                type: object
                properties:
                  access_token:
                    type: string
                  token_type:
                    type: string
                    default: bearer
                  refresh_token:
                    type: string
                  scope:
                    type: string
                    default: feed;profile;post;comment;
                  expires_in:
                    type: number
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                grant_type:
                  type: string
                  example: password
                email:
                  type: string
                  example: user@domain.com
                password:
                  type: string
                  example: password
                scope:
                  type: string
                  example: '*'
              xml:
                name: Authentication
        required: true
  /oauth/revoke:
    post:
      tags:
        - Authentication
      summary: Revoke refresh token access from an user
      description: >-
        This is an example operation to show how security is applied to the
        call.
      security: []
      responses:
        '204':
          description: No Content
      requestBody:
        $ref: '#/components/requestBodies/Body'
  /oauth/token_key:
    get:
      tags:
        - Authentication
      summary: Displays token's public certificate
      description: >-
        This is useful to check wether token is vlid or not;
      security: []
      responses:
        '200':
          description: Ok
      requestBody:
        content:
          text/plain:
            schema:
              type: string
              example: Test
  /users:
    get:
      tags:
        - Users
      summary: Get all users
      security: 
        - OAuth2: []
      description: >-
        This is an example operation to show how security is applied to the
        call.
      responses:
        '200':
          description: OK
    post:
      tags:
        - Users
      summary: Creates a new user
      description: >-
        Unsecured endpoint. Creates a user by providing email, name and
        password.
      security: []
      responses:
        '201':
          description: CREATED
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/User'
      requestBody:
        $ref: '#/components/requestBodies/Body'
  '/users/:userId':
    get:
      tags:
        - Users
      summary: Get a user by its ID
      description: >-
        This is an example operation to show how security is applied to the
        call.
      responses:
        '200':
          description: OK
    put:
      tags:
        - Users
      summary: Alter a user by its ID
      description: >-
        This is an example operation to show how security is applied to the
        call.
      responses:
        '200':
          description: OK
    delete:
      tags:
        - Users
      summary: Deletes an user by its ID
      description: This endpoint deletes an user from database.
      responses:
        '201':
          description: Created - User was succesfully created.
        '400':
          description: >-
            Bad Request - Some data provided in request body or/and headers were
            missing or wrong.
  /posts:
    get:
      tags:
        - Posts
      summary: Gets all posts
      description: >-
        This endpoint includes all comments and media attached to its posts.
        It can be set as FEED as well.
      security:
        - OAuth2: []
      responses:
        '200':
          description: OK
    post:
      tags:
        - Posts
      summary: Creates a single post
      description: >-
        This endpoint was designed to create a single post.
      security:
        - OAuth2: []
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                title:
                  type: string
                  example: My awesome post
                body:
                  type: string
                  example: Check out these amazing photos I just took!
                media:
                  type: array
                  example:
                    - my_photo1.jpg
                    - my_photo2.jpg
                    - my_photo3.jpg
              xml:
                name: Posts
        required: true
      responses:
        '201':
          description: Created
    put:
      tags:
        - Posts
      summary: Server example operation
      description: >-
        This is an example operation to show how security is applied to the
        call.
      responses:
        '200':
          description: OK
    delete:
      tags:
        - Posts
      summary: Deletes an user
      description: This endpoint deletes an user from database.
      responses:
        '201':
          description: Created - User was succesfully created.
        '400':
          description: >-
            Bad Request - Some data provided in request body or/and headers were
            missing or wrong.
  /comments:
    get:
      tags:
        - Comments
      summary: Server heartbeat operation
      description: >-
        This operation shows how to override the global security defined above,
        as we want to open it up for all users.
      security: []
      responses:
        '200':
          description: OK
    post:
      tags:
        - Comments
      summary: Server heartbeat operation
      description: >-
        This operation shows how to override the global security defined above,
        as we want to open it up for all users.
      security: []
      responses:
        '200':
          description: OK
    put:
      tags:
        - Comments
      summary: Server example operation
      description: >-
        This is an example operation to show how security is applied to the
        call.
      responses:
        '200':
          description: OK
    delete:
      tags:
        - Comments
      summary: Deletes an user
      description: This endpoint deletes an user from database.
      responses:
        '201':
          description: Created - User was succesfully created.
        '400':
          description: >-
            Bad Request - Some data provided in request body or/and headers were
            missing or wrong.
tags:
  - name: Authentication
    description: Oauth2 authentication
  - name: Users
    description: User's resource
  - name: Posts
    description: Post's resource
  - name: Comments
    description: Comment's resource
servers:
  - url: 'https://virtserver.swaggerhub.com/ghanizadev/comic-clan/1.0.0'
  - url: 'http://virtserver.swaggerhub.com/ghanizadev/comic-clan/1.0.0'
components:
  requestBodies:
    Body:
      content:
        application/json:
          schema:
            type: object
            properties:
              name:
                type: string
              email:
                type: string
              password:
                type: string
            xml:
              name: Order
      required: true
  securitySchemes:
    basicAuth:
      type: http
      scheme: basic
    OAuth2:
      type: oauth2
      flows:
        password:
          tokenUrl: 'http://localhost/oauth/token'
          scopes:
            feed: allows reading feed resources
            post: allows posting to user's feed
            profile: allows reading, editing and deleting user's profile
            comment: allows commenting in post resources
  schemas:
    User:
      type: object
      properties:
        _id:
          type: string
          format: hex
        name:
          type: string
        email:
          type: string
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time
      xml:
        name: User